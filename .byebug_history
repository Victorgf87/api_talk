c
password_params.public_methods
password_params.parameters
password_params.permitted
password_params.methods
password_params
User.auth_by_mail_and_pass(*parame.as_json)
User.auth_by_mail_and_pass(*parame)
User.auth_by_mail_and_pass(*parame.as_json)
parame.as_json
User.auth_by_mail_and_pass(parame.as_json)
parame
User.auth_by_mail_and_pass(parame)
parame = password_params.slice(:email, :password)
password_params.slice(:email, :password).methods
password_params.slice(:email, :password).as_json
password_params.slice(:email, :password)
password_params.slice(:email, :password))
password_params.slice(:email)
password_params
exit
User.first.token
User.first.auth_token
User.first.regenerate_token
User.first.regenerate_auth_token
User.first.auth_token
exit
User.first.auth_token
User.first.regenerate_token
User.first.token
User.first.auth_token
User.first.generate_unique_secure_token
User.first.auth_token
User.first.token
User.first.authenticate_password('passpass')
User.first.authenticate_passowrd('passpass')
User.first.methods.grep /auth/
User.first.regenerate_auth_token
User.first.auth_token
User.first.methods.grep /auth/
User.first.update(password: 'passpass')
User.first
password_params
params
q
password_params
c
reload!
reload
params.permit(:email, :password)[:email]
params.permit(:email, :password).email
params.permit(:email, :password)
params.require(:email, :password)
params.require(:email)
params
c
params.require
params
User.first.authenticate_password
User.first.authenticate
User.methods.grep /authent/
User.first.methods.grep /authent/
User.first.methods.authent
User.first
User.count
c
params
c
q
 ActionController::HttpAuthentication::Token.methods.grep /gener/
 ActionController::HttpAuthentication::Token.methods
 ActionController::HttpAuthentication::Token
secret_token(request)
authenticate_or_request_with_http_token
token
